"""
Django settings for access_telebot project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("POSTGRES_DB"),
        'USER': os.getenv("POSTGRES_USER"),
        'PASSWORD': os.getenv("POSTGRES_PASSWORD"),
        'HOST': os.getenv("POSTGRES_HOST"),
    },
}

DEBUG = os.getenv("DJANGO_DEBUG", "true") == 'true'

TELEBOT_KEY = os.getenv("TELEBOT_KEY")
SECRET_URL_WAY = os.getenv("SECRET_URL_WAY", "secret").lower()
FIELD_ENCRYPTION_KEY = os.getenv("FIELD_ENCRYPTION_KEY")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()

TRANSLATION = os.getenv("TRANSLATION")
TESTER_CHAT_ID = os.getenv("TESTER_CHAT_ID")

TELEBOT_WEBHOOK = {
    "type": "SERVEO",  # SERVEO is nice for run on local machine
    # "type": "HOST",  # HOST is nice for run on vps like
    # "host": "https://domain.com", # Can be IPv4 also
}

# Warn about expiration days before subscription end
NOTIFIER_SUBSCRIBTION_EXPIRRING_DAYS_BEFORE = timedelta(
    days=int(
        os.getenv("NOTIFIER_SUBSCRIBTION_EXPIRRING_DAYS_BEFORE", 2)
    )
)

# Wait some days after subscription expired is default
# Numbers of day for waitig after subscription expired 
# setting in `WAIT_AFTER_SUBSCRIBTION_EXPIRED_DAYS`.
# Set "FORCE" if need to revoke access exactly after `end_date`
DEFAULT_ACCESS_REVOKING_METHOD=os.getenv(
    "DEFAULT_ACCESS_REVOKING_METHOD", "GENTLE"
)

# Revoke access after number of days after `access.end_date`
WAIT_AFTER_SUBSCRIBTION_EXPIRED_DAYS = timedelta(
    days=int(
        os.getenv("WAIT_AFTER_SUBSCRIBTION_EXPIRED_DAYS", 6)
    )
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s'
        }
    },
    'handlers': {
        'main': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': f'{BASE_DIR}/logs/all.log',
            'maxBytes': 1024 * 1024 * 100,  # 100 mb
        }
    },
    'loggers': {
        # 'console': {
        #     'level': LOG_LEVEL,
        #     'handlers': ['main'],
        #     'propagate': True,
        # },
        'root': {
            'level': LOG_LEVEL,
            'handlers': ['main'],
            'propagate': True,
        },
    }
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
# Temporary solution for generating django keys just use another key
# TODO change this temp shit to normal .env generator
SECRET_KEY = os.getenv("TELEBOT_KEY")  

CSRF_TRUSTED_ORIGINS = [
    'https://serveo.net',  # For webhooks made with backtunnel to Serveo
]
ALLOWED_HOSTS = ["*"]  
ALLOWED_HOSTS_REGEX = [
    r"0\.0\.0\.0",
    r"127\.0\.0\.1",
    r'^[a-f0-9]{32}\.serveo\.net$',  # For webhooks made with backtunnel to Serveo
]
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "main",
    "accesser",
    "messenger",
    "cashier",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "access_telebot.middleware.allowed_hosts_regex.AllowedHostsRegexMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "access_telebot.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "access_telebot.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Setup crypto payment gateways
TRON_CONFIRMATION_COUNT = 19
